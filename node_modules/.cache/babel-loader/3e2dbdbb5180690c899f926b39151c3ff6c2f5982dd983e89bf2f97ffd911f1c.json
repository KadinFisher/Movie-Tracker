{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst KEY = \"c388b899\"; // My OMDb API Key\n\nexport function useMovies(query) {\n  _s();\n  // State to store the list of movies returned from the API\n  const [movies, setMovies] = useState([]);\n\n  // State to manage the loading status while the API call is in progress\n  const [isLoading, setIsLoading] = useState(false);\n\n  // State to store any error messages encountered during the API call\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    // Exit early if the query string is empty or less than three characters\n    if (!query || query.length < 3) {\n      setMovies([]); // Clear movies if the query is invalid\n      return;\n    }\n\n    // Create an AbortController to allow for cancellation of the fetch request\n    const controller = new AbortController();\n\n    // Throttle API calls by delaying fetch execution\n    const timer = setTimeout(() => {\n      async function fetchMovies() {\n        // Set the loading state to true and clear any previous error messages\n        setIsLoading(true);\n        setError(\"\");\n        try {\n          // Make a GET request to the OMDb API using the provided query string\n          const res = await fetch(`http://www.omdbapi.com/?apikey=${KEY}&s=${query}`, {\n            signal: controller.signal\n          } // Pass the abort signal to the fetch request\n          );\n\n          // Parse the response data as JSON\n          const data = await res.json();\n\n          // Check if the API response indicates an error\n          if (data.Response === \"False\") throw new Error(data.Error);\n\n          // Update the state with the list of movies returned by the API\n          setMovies(data.Search);\n        } catch (err) {\n          // If an error occurs, update the error state with the error message\n          setError(err.message);\n        } finally {\n          // Whether successful or not, set the loading state to false\n          setIsLoading(false);\n        }\n      }\n      fetchMovies();\n    }, 300); // Delay of 300ms to throttle requests\n\n    // Cleanup function to abort fetch and clear timeout\n    return () => {\n      clearTimeout(timer); // Clear the timer if the query changes\n      controller.abort(); // Abort the ongoing API call\n    };\n  }, [query]); // Dependency array ensures this effect runs whenever the query changes\n\n  // Return the movies, loading status, and error message to the consuming component\n  return {\n    movies,\n    isLoading,\n    error\n  };\n}\n_s(useMovies, \"U+znDQTK7eje4cwlxt5gS2qHcHc=\");","map":{"version":3,"names":["useState","useEffect","KEY","useMovies","query","_s","movies","setMovies","isLoading","setIsLoading","error","setError","length","controller","AbortController","timer","setTimeout","fetchMovies","res","fetch","signal","data","json","Response","Error","Search","err","message","clearTimeout","abort"],"sources":["/Users/kadinfisher/Downloads/Software/Coding_Classes/Junior/CMSC389V/movie-tracker/src/useMovies.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst KEY = \"c388b899\"; // My OMDb API Key\n\nexport function useMovies(query) {\n  // State to store the list of movies returned from the API\n  const [movies, setMovies] = useState([]);\n  \n  // State to manage the loading status while the API call is in progress\n  const [isLoading, setIsLoading] = useState(false);\n  \n  // State to store any error messages encountered during the API call\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    // Exit early if the query string is empty or less than three characters\n    if (!query || query.length < 3) {\n      setMovies([]); // Clear movies if the query is invalid\n      return;\n    }\n\n    // Create an AbortController to allow for cancellation of the fetch request\n    const controller = new AbortController();\n\n    // Throttle API calls by delaying fetch execution\n    const timer = setTimeout(() => {\n      async function fetchMovies() {\n        // Set the loading state to true and clear any previous error messages\n        setIsLoading(true);\n        setError(\"\");\n\n        try {\n          // Make a GET request to the OMDb API using the provided query string\n          const res = await fetch(\n            `http://www.omdbapi.com/?apikey=${KEY}&s=${query}`,\n            { signal: controller.signal } // Pass the abort signal to the fetch request\n          );\n          \n          // Parse the response data as JSON\n          const data = await res.json();\n\n          // Check if the API response indicates an error\n          if (data.Response === \"False\") throw new Error(data.Error);\n\n          // Update the state with the list of movies returned by the API\n          setMovies(data.Search);\n        } catch (err) {\n          // If an error occurs, update the error state with the error message\n          setError(err.message);\n        } finally {\n          // Whether successful or not, set the loading state to false\n          setIsLoading(false);\n        }\n      }\n\n      fetchMovies();\n    }, 300); // Delay of 300ms to throttle requests\n\n    // Cleanup function to abort fetch and clear timeout\n    return () => {\n      clearTimeout(timer); // Clear the timer if the query changes\n      controller.abort(); // Abort the ongoing API call\n    };\n  }, [query]); // Dependency array ensures this effect runs whenever the query changes\n\n  // Return the movies, loading status, and error message to the consuming component\n  return { movies, isLoading, error };\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,GAAG,GAAG,UAAU,CAAC,CAAC;;AAExB,OAAO,SAASC,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC/B;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACG,KAAK,IAAIA,KAAK,CAACQ,MAAM,GAAG,CAAC,EAAE;MAC9BL,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MACf;IACF;;IAEA;IACA,MAAMM,UAAU,GAAG,IAAIC,eAAe,EAAE;;IAExC;IACA,MAAMC,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC7B,eAAeC,WAAWA,CAAA,EAAG;QAC3B;QACAR,YAAY,CAAC,IAAI,CAAC;QAClBE,QAAQ,CAAC,EAAE,CAAC;QAEZ,IAAI;UACF;UACA,MAAMO,GAAG,GAAG,MAAMC,KAAK,CACpB,kCAAiCjB,GAAI,MAAKE,KAAM,EAAC,EAClD;YAAEgB,MAAM,EAAEP,UAAU,CAACO;UAAO,CAAC,CAAC;UAAA,CAC/B;;UAED;UACA,MAAMC,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAI,EAAE;;UAE7B;UACA,IAAID,IAAI,CAACE,QAAQ,KAAK,OAAO,EAAE,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACG,KAAK,CAAC;;UAE1D;UACAjB,SAAS,CAACc,IAAI,CAACI,MAAM,CAAC;QACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;UACZ;UACAf,QAAQ,CAACe,GAAG,CAACC,OAAO,CAAC;QACvB,CAAC,SAAS;UACR;UACAlB,YAAY,CAAC,KAAK,CAAC;QACrB;MACF;MAEAQ,WAAW,EAAE;IACf,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;IAET;IACA,OAAO,MAAM;MACXW,YAAY,CAACb,KAAK,CAAC,CAAC,CAAC;MACrBF,UAAU,CAACgB,KAAK,EAAE,CAAC,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,CAACzB,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEb;EACA,OAAO;IAAEE,MAAM;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACrC;AAACL,EAAA,CA/DeF,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}